{"ast":null,"code":"/// <reference types=\"chrome\"/>\nimport * as i0 from \"@angular/core\";\n\nfunction AppComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_template_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onFocusClick();\n    });\n    i0.ɵɵelement(1, \"span\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r0.currentFocusIcon);\n  }\n}\n\nfunction AppComponent_h5_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h5\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Blur Intensity: \", ctx_r1.blurIntensity, \"px\");\n  }\n}\n\nfunction AppComponent_h5_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h5\");\n    i0.ɵɵtext(1, \"Toggle focus to change blur intensity\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AppComponent_ng_template_15_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_template_15_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onTextHighlightingClick();\n    });\n    i0.ɵɵelement(1, \"span\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r3.currentTextHighlightingIcon);\n  }\n}\n\nfunction AppComponent_ng_template_21_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function AppComponent_ng_template_21_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onIncreaseTextButtonClick();\n    });\n    i0.ɵɵelement(1, \"span\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r4.currentIncreaseTextButtonIcon);\n  }\n}\n\nfunction AppComponent_h5_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h5\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Button Color: \", ctx_r5.color, \"px\");\n  }\n}\n\nfunction AppComponent_h5_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h5\");\n    i0.ɵɵtext(1, \"Select button color\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor() {\n      this.title = 'disability-chrome-extension';\n      this.focusSelected = false;\n      this.textHighlightingSelected = false;\n      this.increaseTextButtonSelected = false;\n      this.focusIconColor = \"red\";\n      this.currentFocusIcon = \"pi pi-eye-slash\";\n      this.currentTextHighlightingIcon = \"pi pi-eye-slash\";\n      this.currentIncreaseTextButtonIcon = \"pi pi-eye-slash\";\n      this.blurIntensity = 3;\n    }\n\n    ngOnInit() {// chrome.storage.sync.get(['focusSelected'], function(result) {\n      //   this.focusSelected = result;\n      //   this.setFocusIcons();\n      // });\n    }\n\n    setFocusIcons() {\n      if (this.focusSelected) {\n        this.currentFocusIcon = \"pi pi-eye\";\n        this.focusIconColor = \"green\";\n      } else {\n        this.currentFocusIcon = \"pi pi-eye-slash\";\n        this.focusIconColor = \"red\";\n      }\n    }\n\n    setTextHighlightingIcons() {\n      if (this.textHighlightingSelected) {\n        this.currentTextHighlightingIcon = \"pi pi-eye\";\n      } else {\n        this.currentTextHighlightingIcon = \"pi pi-eye-slash\";\n      }\n    } //step 1\n\n\n    setIncreaseButtonSizeIcons() {\n      if (this.increaseTextButtonSelected) {\n        this.currentIncreaseTextButtonIcon = \"pi pi-eye\";\n      } else {\n        this.currentIncreaseTextButtonIcon = \"pi pi-eye-slash\";\n      }\n    }\n\n    onFocusClick() {\n      this.focusSelected = !this.focusSelected;\n      this.setFocusIcons(); //chrome.storage.sync.set({'focusSelected': this.focusSelected});\n\n      if (this.focusSelected) {\n        chrome.tabs.query({\n          active: true,\n          currentWindow: true\n        }, tabs => {\n          let message = \"enableFocusHoveredArea:\" + this.blurIntensity;\n          chrome.tabs.sendMessage(tabs[0].id, message);\n        });\n      } else {\n        chrome.tabs.query({\n          active: true,\n          currentWindow: true\n        }, tabs => {\n          chrome.tabs.sendMessage(tabs[0].id, \"disableFocusHoveredArea\");\n        });\n      }\n    }\n\n    updateBlurIntensity() {\n      chrome.tabs.query({\n        active: true,\n        currentWindow: true\n      }, tabs => {\n        let message = \"updateBlurIntensity:\" + this.blurIntensity;\n        chrome.tabs.sendMessage(tabs[0].id, message);\n      });\n    }\n\n    onTextHighlightingClick() {\n      this.textHighlightingSelected = !this.textHighlightingSelected;\n      this.setTextHighlightingIcons();\n\n      if (this.textHighlightingSelected) {\n        chrome.tabs.query({\n          active: true,\n          currentWindow: true\n        }, tabs => {\n          let message = \"enableTextHighlighting\";\n          chrome.tabs.sendMessage(tabs[0].id, message);\n        });\n      } else {\n        chrome.tabs.query({\n          active: true,\n          currentWindow: true\n        }, tabs => {\n          let message = \"disableTextHighlighting\";\n          chrome.tabs.sendMessage(tabs[0].id, message);\n        });\n      }\n    } //step 2\n\n\n    onIncreaseTextButtonClick() {\n      this.increaseTextButtonSelected = !this.increaseTextButtonSelected;\n      this.setIncreaseButtonSizeIcons();\n\n      if (this.increaseTextButtonSelected) {\n        chrome.tabs.query({\n          active: true,\n          currentWindow: true\n        }, tabs => {\n          let message = \"enableIncreaseTextButton:\" + this.color;\n          chrome.tabs.sendMessage(tabs[0].id, message);\n        });\n      } else {\n        chrome.tabs.query({\n          active: true,\n          currentWindow: true\n        }, tabs => {\n          chrome.tabs.sendMessage(tabs[0].id, \"disableIncreaseTextButton\");\n        });\n      }\n    } //step 3\n\n\n    updateButtonColor() {\n      chrome.tabs.query({\n        active: true,\n        currentWindow: true\n      }, tabs => {\n        let message = \"updateButtonColor:\" + this.color;\n        chrome.tabs.sendMessage(tabs[0].id, message);\n      });\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 28,\n    vars: 20,\n    consts: [[1, \"body\"], [1, \"header\"], [\"src\", \"icon.png\", \"alt\", \"Logo\", 1, \"center\"], [1, \"space\"], [\"header\", \"Focus Content\", \"iconPos\", \"end\", \"collapsed\", \"true\", 3, \"toggleable\"], [\"pTemplate\", \"icons\"], [4, \"ngIf\"], [3, \"animate\", \"ngModel\", \"step\", \"min\", \"max\", \"disabled\", \"ngModelChange\", \"onSlideEnd\"], [1, \"less-space\"], [\"header\", \"Text Highlighting\", \"iconPos\", \"end\", \"collapsed\", \"true\", 3, \"toggleable\"], [\"header\", \"Increase Text and Button Sizing\", \"iconPos\", \"end\", \"collapsed\", \"true\", 3, \"toggleable\"], [3, \"ngModel\", \"inline\", \"disabled\", \"ngModelChange\", \"onChange\"], [\"pButton\", \"\", \"pTooltip\", \"Toggle focused content on the page\", 1, \"p-panel-header-icon\", \"p-link\", 3, \"click\"], [2, \"font-size\", \"1.5rem\"], [\"pButton\", \"\", \"pTooltip\", \"Toggle text highlighting on the page\", 1, \"p-panel-header-icon\", \"p-link\", 3, \"click\"], [\"pButton\", \"\", \"pTooltip\", \"Toggle increased text and button sizing\", 1, \"p-panel-header-icon\", \"p-link\", 3, \"click\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"img\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3)(4, \"div\")(5, \"p-panel\", 4);\n        i0.ɵɵtemplate(6, AppComponent_ng_template_6_Template, 2, 2, \"ng-template\", 5);\n        i0.ɵɵelementStart(7, \"div\")(8, \"p\");\n        i0.ɵɵtext(9, \" This helps focus on what matters. Improve your focus by turning on this extension. It will blur the content around the page, keeping important headers like navigation bars, in order to make the process of activities like reading a Wikepedia article more efficient! \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(10, AppComponent_h5_10_Template, 2, 1, \"h5\", 6);\n        i0.ɵɵtemplate(11, AppComponent_h5_11_Template, 2, 0, \"h5\", 6);\n        i0.ɵɵelementStart(12, \"p-slider\", 7);\n        i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_p_slider_ngModelChange_12_listener($event) {\n          return ctx.blurIntensity = $event;\n        })(\"onSlideEnd\", function AppComponent_Template_p_slider_onSlideEnd_12_listener() {\n          return ctx.updateBlurIntensity();\n        });\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(13, \"div\", 8)(14, \"p-panel\", 9);\n        i0.ɵɵtemplate(15, AppComponent_ng_template_15_Template, 2, 2, \"ng-template\", 5);\n        i0.ɵɵelementStart(16, \"div\")(17, \"p\");\n        i0.ɵɵtext(18, \" This makes reading paragraphs and text alike a lot easier. It will highlight the text you are reading in order to make for a smoother reading experience. \");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(19, \"div\", 8)(20, \"p-panel\", 10);\n        i0.ɵɵtemplate(21, AppComponent_ng_template_21_Template, 2, 2, \"ng-template\", 5);\n        i0.ɵɵelementStart(22, \"div\")(23, \"p\");\n        i0.ɵɵtext(24, \" This helps increase the size of button and select its color to make buttons easier to read. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(25, AppComponent_h5_25_Template, 2, 1, \"h5\", 6);\n        i0.ɵɵtemplate(26, AppComponent_h5_26_Template, 2, 0, \"h5\", 6);\n        i0.ɵɵelementStart(27, \"p-colorPicker\", 11);\n        i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_p_colorPicker_ngModelChange_27_listener($event) {\n          return ctx.color = $event;\n        })(\"onChange\", function AppComponent_Template_p_colorPicker_onChange_27_listener() {\n          return ctx.updateButtonColor();\n        });\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵclassProp(\"color\", ctx.focusIconColor);\n        i0.ɵɵproperty(\"toggleable\", true);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.focusSelected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.focusSelected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"animate\", true)(\"ngModel\", ctx.blurIntensity)(\"step\", 1)(\"min\", 1)(\"max\", 6)(\"disabled\", !ctx.focusSelected);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"toggleable\", true);\n        i0.ɵɵadvance(6);\n        i0.ɵɵclassProp(\"color\", ctx.focusIconColor);\n        i0.ɵɵproperty(\"toggleable\", true);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.increaseTextButtonSelected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.increaseTextButtonSelected);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.color)(\"inline\", true)(\"disabled\", !ctx.increaseTextButtonSelected);\n      }\n    },\n    styles: [\".header[_ngcontent-%COMP%]{height:20%}img[_ngcontent-%COMP%]{max-width:20%;height:auto}.space[_ngcontent-%COMP%]{margin-top:20px}.less-space[_ngcontent-%COMP%]{margin-top:5px}.center[_ngcontent-%COMP%]{display:block;margin-left:auto;margin-right:auto;width:50%}.body[_ngcontent-%COMP%]{min-width:500px;min-height:500px}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}